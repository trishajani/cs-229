{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #=========================================\
# Classification   \
# LMP Battery\
# Models: Naive Bayes , SVM linear, polynomial\
# Use 5 features \
#=========================================\
\
rm(list=ls())\
library(e1071)\
\
#Load data \
load("~/Predictive Model/tempRData.RData")\
\
#Only use consumers who were in the adoption study \
basicsPlus<- subset(basicsPlus, in_adoption_study==1)\
\
#Remove features that are only NA\
basicsPlus<- basicsPlus[,colSums(is.na(basicsPlus))<nrow(basicsPlus)]\
\
#Remove observations that are NA\
basicsPlus<- na.omit(basicsPlus)\
\
#Define the two new features \
basicsPlus$peak_fraction <- rowSums( basicsPlus[,65:70] )/rowSums( basicsPlus[,52:75] )\
\
########Discretize outputs. \
#==========================\
#Make a histogram to understand spread of NPVs\
savings <- basicsPlus$NPV_sellLMP_DR_batt\
hist(basicsPlus$NPV_sellLMP_DR_batt, xlab="Savings",ylab="Number of households", main="Battery", xlim=c(0,3000),col="lightgrey")\
hist(basicsPlus$NPV_sellLMP_DR_solar,xlab="Savings",ylab="Number of households", main="Solar ",col="lightgrey")\
hist(basicsPlus$NPV_sellLMP_DR_batt_solar,xlab="Savings",ylab="Number of households", main="Solar and battery",col="lightgrey")\
\
\
\
#Get quartile info\
quartiles<- unname(quantile(basicsPlus$NPV_sellLMP_DR_batt))\
\
\
#Create a new columns that indicates which quartile of savings the household is in\
basicsPlus$quartile <- ifelse(basicsPlus$NPV_sellLMP_DR_batt <=quartiles[2], 1, \
                              ifelse(basicsPlus$NPV_sellLMP_DR_batt <=quartiles[3], 2, \
                                     ifelse(basicsPlus$NPV_sellLMP_DR_batt <=quartiles[4], 3, 4)))\
#basicsPlus$quartile <- ifelse(basicsPlus$NPV_sellLMP_DR_batt <=quartiles[2], 1, 2)\
\
\
basicsPlus$quartile <- as.factor(basicsPlus$quartile)\
\
\
\
#View column names\
#colnames(basicsPlus)\
\
#############Create training and testing data sets. 80/20 train/test\
#====================================================================\
#trainingRows <- createDataPartition(basicsPlusShort$NPV_sellLMP_DR_batt_solar, p= .80, list=FALSE) \
\
n = 80\
t = dim(basicsPlus) [1]\
n_percent = trunc(t * n /100)\
set.seed(42)\
trainingRows <- sample(t, n_percent)\
trainingSet <- basicsPlus[ trainingRows, ]\
testingSet <- basicsPlus[ -trainingRows, ]\
\
#formula= quartile ~  max_pct + peak_fraction  + max + mean + cp1_upper\
\
#===================================\
# Classification\
# LMP Battery\
# Linear SVM\
#===================================\
Data_train= subset(trainingSet, select=c("max_pct", "peak_fraction" ,"max" ,"mean", "cp1_upper", "quartile"))\
Data_train_small<- Data_train[1:10000,]\
\
x_train= subset(trainingSet, select=c("max_pct", "peak_fraction" ,"max" ,"mean", "cp1_upper"))\
x_train_small<- x_train[1:1000,]\
x_test= subset(testingSet, select=c("max_pct", "peak_fraction" ,"max" ,"mean", "cp1_upper"))\
x_test_small<- x_test[1:500,]\
\
y_train= trainingSet$quartile\
y_test= testingSet$quartile\
\
#train model\
model <- quartile ~ max_pct + peak_fraction  + max + mean + cp1_upper\
svml_LMP_B <- svm(formula=model, data = Data_train)\
summary(svml_LMP_B)\
\
#test model    \
predictedFit_LMP_B<- predict(svml_LMP_B, x_train)\
table(pred=predictedFit_LMP_B,true=y_train)\
mean(predictedFit_LMP_B==y_train) #train error\
\
\
predictedFit_LMP_B<- predict(svml_LMP_B, x_test)\
table(pred=predictedFit_LMP_B,true=y_test)\
mean(predictedFit_LMP_B==y_test) #test error\
\
\
#===================================\
# Classification\
# LMP Battery\
# Polynomial SVM\
#===================================\
Data_train= subset(trainingSet, select=c("max_pct", "peak_fraction" ,"max" ,"mean", "cp1_upper", "quartile"))\
Data_train_small<- Data_train[1:10000,]\
x_test= subset(testingSet, select=c("max_pct", "peak_fraction" ,"max" ,"mean", "cp1_upper"))\
\
y_train= trainingSet$quartile\
y_test= testingSet$quartile\
\
#train model\
model <- quartile ~ max_pct + peak_fraction  + max + mean + cp1_upper\
svmp_LMP_B <- svm(formula=model, data = Data_train_small, kernel='polynomial')\
summary(svmp_LMP_B)\
\
\
predictedFit_LMP_B<- predict(svmp_LMP_B, x_train)\
table(pred=predictedFit_LMP_B,true=y_train)\
mean(predictedFit_LMP_B==y_train) #train error\
\
\
#test model                   \
predictedFit_LMP_B<- predict(svmp_LMP_B, x_test)\
table(pred=predictedFit_LMP_B,true=y_test)\
mean(predictedFit_LMP_B==y_test)\
\
\
-----------\
 # do some plotting\
plot_b.s <- ggplot(data.frame(npvs), aes(x= DR_batt, y= DR_solar))\
plot_b.s + geom_point()+ geom_smooth(method = "lm", se = TRUE) + ggtitle("Solar vs battery adoption")\
\
\
#===================================\
# Classification\
# LMP Battery\
# Naive Bayes\
#===================================\
Data_train= subset(trainingSet, select=c("max_pct", "peak_fraction" ,"max" ,"mean", "cp1_upper", "quartile"))\
Data_train_small<- Data_train[1:1000,]\
\
x_train= subset(trainingSet, select=c("max_pct", "peak_fraction" ,"max" ,"mean", "cp1_upper"))\
x_train_small<- x_train[1:1000,]\
x_test= subset(testingSet, select=c("max_pct", "peak_fraction" ,"max" ,"mean", "cp1_upper"))\
x_test_small<- x_test[1:500,]\
\
y_train= trainingSet$quartile\
y_test= testingSet$quartile\
\
#train model\
model <- quartile ~ max_pct + peak_fraction  + max + mean + cp1_upper\
NB_LMP_B <- naiveBayes(formula=model, data = Data_train)\
NB_LMP_B\
\
\
\
predictedFit_LMP_B<- predict(NB_LMP_B, x_train)\
table(pred=predictedFit_LMP_B,true=y_train)\
mean(predictedFit_LMP_B==y_train) #train accuracy\
\
\
predictedFit_LMP_B<- predict(NB_LMP_B, x_test)\
table(pred=predictedFit_LMP_B,true=y_test)\
\
#find the fraction of correct predictions\
mean(predictedFit_LMP_B==y_test)\
\
}