{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #=========================================\
# Predictive Modeling    \
# LMP Battery and Solar \
# Models: lm, glmboost, rpart \
# Use a selected subset of features \
#=========================================\
\
\
library(caret)\
\
#Load data \
load("~/Predictive Model/tempRData.RData")\
\
#Only use consumers who were in the adoption study \
basicsPlus<- subset(basicsPlus, in_adoption_study==1)\
\
#Remove features that are only NA\
basicsPlus<- basicsPlus[,colSums(is.na(basicsPlus))<nrow(basicsPlus)]\
\
#Remove observations that are NA\
basicsPlus<- na.omit(basicsPlus)\
\
#Define the two new features \
basicsPlus$peak_fraction <- rowSums( basicsPlus[,65:70] )/rowSums( basicsPlus[,52:75] )\
\
#Create training and testing data sets. 80/20 train/test\
\
n = 80\
t = dim(basicsPlus) [1]\
n_percent = trunc(t * n /100)\
set.seed(42)\
trainingRows <- sample(t, n_percent)\
trainingSet <- basicsPlus[ trainingRows, ]\
testingSet <- basicsPlus[ -trainingRows, ]\
\
formula= NPV_sellLMP_DR_batt_solar ~  max_pct + peak_fraction + max + mean + cp1_upper\
\
#===================================\
#lm\
#===================================\
\
lmFit_LMP_SB <- train(formula,\
                      data= trainingSet,\
                      method= "lm",\
                      trControl= trainControl(method= "repeatedcv", number= 5, repeats= 5) ,\
                      preProc= c("center", "scale")) #center and scale \
predictedFit_LMP_SB<- predict(lmFit_LMP_SB, testingSet)\
summary(lmFit_LMP_SB)\
#Compare RMSE of prediction to the standard deviation of the NPVs \
RMSE(predictedFit_LMP_SB, testingSet$NPV_sellLMP_DR_batt_solar)\
sd(testingSet$NPV_sellLMP_DR_batt_solar)\
\
#Plot actual vs predicted. Should be a straight line \
plot(predictedFit_LMP_SB, testingSet$NPV_sellLMP_DR_batt_solar, xlab="Predicted NPV", ylab="Actual NPV", main="Fig 3. Actual vs. predicted NPV")\
abline(0,1, col="red")\
#Residuals plot\
residuals<- resid(lmFit_LMP_SB)\
plot(trainingSet$NPV_sellLMP_DR_batt_solar, residuals, xlab="NPV", ylab="Residual", main="Fig 4. Residuals")\
abline(0,0, col="red")\
\
LMP_SB_imp<- varImp(lmFit_LMP_SB)\
#Remove variables from environment\
rm(lmFit_LMP_SB)\
rm(predictedFit_LMP_SB)\
\
\
#===================================\
# glmboost fit with 13 chosen features\
# LMP Solar and Battery\
#===================================\
library("plyr")\
library("mboost")\
\
glmboostGrid <- expand.grid(mstop= c(100, 200, 300, 400,500, 600), prune="no")\
glmboostFit_LMP_SB <- train(formula,\
                            data= trainingSet,\
                            tuneGrid= glmboostGrid,\
                            method= "glmboost", \
                            trControl= trainControl(method= "repeatedcv", number= 5, repeats= 5),\
                            preProc= c("center", "scale"))\
\
predictedFit_LMP_SB<- predict(glmboostFit_LMP_SB, testingSet)\
summary(glmboostFit_LMP_SB)\
#Compare RMSE of prediction to the standard deviation of the NPVs \
RMSE(predictedFit_LMP_SB, testingSet$NPV_sellLMP_DR_batt_solar)\
sd(testingSet$NPV_sellLMP_DR_batt_solar)\
plot(glmboostFit_LMP_SB)\
glmboostFit_LMP_SB$results\
#Plot actual vs predicted. Should be a straight line \
plot(predictedFit_LMP_SB, testingSet$NPV_sellLMP_DR_batt_solar)\
abline(0,1)\
#Residuals plot\
residuals<- resid(glmboostFit_LMP_SB)\
plot(trainingSet$NPV_sellLMP_DR_batt_solar, residuals)\
abline(0,0)\
#Remove variables from environment\
rm(glmboostFit_LMP_SB)\
rm(predictedFit_LMP_SB)\
rm(residuals)\
\
#===================================\
# rpart fit with 5\
#===================================\
library("rpart")\
\
rpartFit_LMP_SB <- train(formula,\
                         data= trainingSet,\
                         method= "rpart",\
                         trControl= trainControl(method= "repeatedcv", number= 5, repeats= 5),\
                         preProc= c("center", "scale"))\
\
predictedFit_LMP_SB<- predict(rpartFit_LMP_SB, testingSet)\
summary(rpartFit_LMP_SB)\
#Compare RMSE of prediction to the standard deviation of the NPVs \
RMSE(predictedFit_LMP_SB, testingSet$NPV_sellLMP_DR_batt_solar)\
sd(testingSet$NPV_sellLMP_DR_batt_solar)\
plot(rpartFit_LMP_SB)\
rpartFit_LMP_SB$results\
#Plot actual vs predicted. Should be a straight line \
plot(predictedFit_LMP_SB, testingSet$NPV_sellLMP_DR_batt_solar)\
abline(0,1)\
#Draw tree \
plot(rpartFit_LMP_SB$finalModel)\
text(rpartFit_LMP_SB$finalModel)\
\
\
\
\
}